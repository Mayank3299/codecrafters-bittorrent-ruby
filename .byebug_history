q
magnet_data
n
rest[1..]
rest
hash
n
rest
n
rest
hash
n
hash
n
hash
n
value
n
rest
key
n
s
n
s
n
bencoded_value[0]
s
data[idx + 2..].force_encoding('ASCII-8BIT')
data[idx + 2..]
idx
data
q
decode_bencode(data[43..].force_encoding('ASCII-8BIT'))
decode_bencode(data[44..])
decode_bencode(data[43..])
data[43..]
data.index('eed')
data
require 'bencode'
metadata_message
decode_bencode(data)
data = "\x81d8:msg_typei1e5:piecei0e10:total_sizei91eed6:lengthi79752e4:name11:magnet2.gif12:piecelengthi262144e6:pieces20:\xD7\x8A\x7FU\xDD\xD8\x9F\xEFG{\xC4\x9D\x93\x8B\xC7\xE4\xD9@\x94\xF1e"
metadata_message[:payload]
metadata_message
decode_bencode(metadata_message[:payload][1..])
'\xD7\x8A\x7FU\xDD\xD8\x9F\xEFG{\xC4\x9D\x93\x8B\xC7\xE4\xD9@\x94\xF1'.unpack1('H*').scan(/.{40}/)
'\xD7\x8A\x7FU\xDD\xD8\x9F\xEFG{\xC4\x9D\x93\x8B\xC7\xE4\xD9@\x94\xF1'.unpack('H*')
metadata_message
decode_bencode(metadata_message[:payload][1..].split(' ', 2).last)
metadata_message[:payload][1..].split(' ', 2).last
decode_bencode(metadata_message[:payload][1..].split(' ', 2).last)
decode_bencode(metadata_message[:payload][1..].split(' ', 2).first)
metadata_message[:payload][1..].split(' ', )
metadata_message[:payload][1..].split(' ', 2)
decode_bencode(metadata_message[:payload][1..])
decode_bencode(_)
metadata_message[:payload][1..]
metadata_message[:payload][0]
metadata_message[:payload][1]
metadata_message[:payload]
metadata_message
q
decode_bencode(message[:payload][1..]).first['m']['ut_metadata']
decode_bencode(message[:payload][1..]).first['m']
decode_bencode(message[:payload][1..]).first
decode_bencode(message[:payload][1..])
message[:payload][1]
message[:payload][0]
message[:payload]
message[:payload].unpack('H*')
message[:payload].unpack1('H*')
message[:payload]
decode_bencode(message[:payload])
decode_benecode(message[:payload])
message
q
message
q
response[20..27].unpack1('H*').to_i(16)
response[20..27].unpack1('H*').to_i(5)
response[20..27].unpack1('H*').to_i
response[20..27].unpack1('H*')
response[20..27].unpack('H*')
response[20..27].unpack1('N*')
response[20..27].unpack('H*')
response[20..27].unpack('N*')
response[20..27]
response
n
q
response
response[20..27].unpack1('A8RESPONSE')
response[20..27].unpack1('C*')
)
response[20..27].unpack1('H*').to_i
response[20..27].unpack1('H*')
response[20..27]
response[20..28]
response
"\x00\x00\x00\x00\x00\x10\x00\x04".unpack1('H*').to_i(16)
"\x00\x00\x00\x00\x00\x10\x00\x04".unpack1('H*')
response.unpack('C A19 A8 A20 H*')
response.unpack('C A19 H8 A20 H*')
response.unpack('C A19 A8 A20 H*')
bt_protocol.length
bt_protocol.length.chr
bt_protocol = 'BitTorrent protocol'
response.unpack('H*')
response
n
e
n
build_handshake(info_hash, peer_id, extension: extension)
(build_handshake(info_hash, peer_id, extension: extension)
n
(build_handshake(info_hash, peer_id, extension: extension)
socket
n
q
n
s
n
s
peer_port
peer_ip
n
q
peers_data
n
peers
n
params
n
q
params
n
q
decoded_response
n
response.body
n
q
response.body
n
q
response.body
response
n
tracker_url
response.body
response
n
tracker_url = 'http://tracker.openbittorrent.com:80/announce'
n
s
n
response
n
params
params['port'] = 80
n
tracker_url = 'http://tracker.openbittorrent.com:80/announce'
tracker_url
n
s
n
decoded_str
n
torrent_path
n
q
n
output_hash = Digest::SHA1.digest(piece_data)
expected_hash = info_hash['pieces'].byteslice(piece_index * 20, 20)
piece_data
piece_index
info_hash
s
validate_piece_data(decoded_info, piece_index, piece_data)
n
piece_data
piece_dat
n
info_hash
socket
n
s
n
s
n
s
n
s
n
q
piece_index
info_hash
socket
s
n
piece_index
s
n
s
n
s
n
q
y
q
n
s
n
s
piece_indices
n
s
n
s
n
s
n
s
n
q
bitfield_payload
n
s
n
s
n
q
bitfield_payload
n
s
n
s
n
  bits.chars.each_with_index.select { |bit, _| bit == '1' }.map(&:last)
  bits = payload.unpack1('B*')
payload = message[:payload]
message
n
s
n
s
n
s
n
q
n
s
n
s
a
n
